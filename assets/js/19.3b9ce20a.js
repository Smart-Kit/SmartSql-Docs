(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{405:function(t,a,s){"use strict";s.r(a);var e=s(28),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"关于-smartsql-的-sql-语句的属性替换前缀说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于-smartsql-的-sql-语句的属性替换前缀说明"}},[t._v("#")]),t._v(" 关于 SmartSql 的 SQL 语句的属性替换前缀说明")]),t._v(" "),s("h2",{attrs:{id:"用途"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用途"}},[t._v("#")]),t._v(" 用途")]),t._v(" "),s("p",[t._v("使用 SmartSql 库的属性前缀 ParameterPrefix 能赋予 SQL 语句属性替换参数的功能，可以将 SQL 语句中的属性替换为业务方传入的参数")]),t._v(" "),s("p",[t._v("如以下代码，在运行时将替换 "),s("code",[t._v("@Id")]),t._v(" 为业务传入参数")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--获取表映射实体--\x3e")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Statement")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("Id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("GetEntity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n            Select * From T_User Where Id=@Id\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("Statement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("h2",{attrs:{id:"用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用法"}},[t._v("#")]),t._v(" 用法")]),t._v(" "),s("p",[t._v("在 SmartSql 中将使用两套属性前缀 ParameterPrefix 定义，一套是根据具体的数据库采用不同的默认属性前缀 ParameterPrefix 字符。另一套是开发者自定义的属性前缀，开发者可以在 SmartSqlMapConfig.xml 的 Settings 的 ParameterPrefix 属性进行自定义，如以下示例，将定义默认的属性前缀为 "),s("code",[t._v("$")]),t._v(" 符号")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("SmartSqlMapConfig")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("xmlns")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("http://SmartSql.net/schemas/SmartSqlMapConfig.xsd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Settings")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("ParameterPrefix")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("SmartSqlMapConfig")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("h2",{attrs:{id:"默认值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#默认值"}},[t._v("#")]),t._v(" 默认值")]),t._v(" "),s("p",[t._v("默认的各个数据库采用的默认属性前缀 ParameterPrefix 字符如下")]),t._v(" "),s("ul",[s("li",[t._v("SQL Server: "),s("code",[t._v("@")])]),t._v(" "),s("li",[t._v("My SQL Server: "),s("code",[t._v("@")])]),t._v(" "),s("li",[t._v("POSTGRESQL: "),s("code",[t._v("@")])]),t._v(" "),s("li",[t._v("SQLite: "),s("code",[t._v("@")])]),t._v(" "),s("li",[t._v("MySQL: "),s("code",[t._v("?")])]),t._v(" "),s("li",[t._v("MySQL CONNECTOR: "),s("code",[t._v("?")])]),t._v(" "),s("li",[t._v("ORACLE: "),s("code",[t._v(":")])])]),t._v(" "),s("p",[t._v("在 SmartSql 中的全局参数前缀，默认使用 "),s("code",[t._v("$")]),t._v(" 适配所有 DB 数据库")]),t._v(" "),s("h2",{attrs:{id:"原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),s("p",[t._v("在 SmartSql 库的一个重要功能就是支持编写底层的 SQL 语句。在 SQL 语句里面的属性可以通过一定的规则替换为业务层传入的参数。如下面代码")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--获取表映射实体--\x3e")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Statement")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("Id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("GetEntity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n            Select * From T_User Where Id=@Id\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("Statement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("以上代码的 "),s("code",[t._v("Where Id=@Id")]),t._v(" 的 "),s("code",[t._v("@Id")]),t._v(" 将会在运行时替换为映射参数的具体值。映射参数在对应的 Repository interfaces 定义，如以下代码示例")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IUserRepository")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token attribute"}},[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Statement")]),s("span",{pre:!0,attrs:{class:"token attribute-arguments"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"GetEntity"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t._v("User")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetById")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token attribute"}},[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Param")]),s("span",{pre:!0,attrs:{class:"token attribute-arguments"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Id"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")])]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("以上代码示例可以在"),s("a",{attrs:{href:"https://github.com/dotnetcore/SmartSql/blob/e3a18b7c356b7a2033eaf3c9a55f9ca9b92121ec/sample/SmartSql.Sample.AspNetCore/DyRepositories/IUserRepository.cs#L16-L17",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方仓库的 sample/SmartSql.Sample.AspNetCore/DyRepositories/IUserRepository.cs"),s("OutboundLink")],1),t._v(" 找到")]),t._v(" "),s("p",[t._v("那么 SmartSql 是如何了解需要将 "),s("code",[t._v("Where Id=@Id")]),t._v(" 的 "),s("code",[t._v("@Id")]),t._v(" 替换为 IUserRepository 的 "),s("code",[t._v('User GetById([Param("Id")]long id);')]),t._v(" 方法中的 "),s("code",[t._v("long id")]),t._v(" 参数？请看下文")]),t._v(" "),s("p",[t._v("可以关注到在 "),s("code",[t._v("Select * From T_User Where Id=@Id")]),t._v(" 中需要替换的属性包含了前缀 ParameterPrefix 属性前缀 "),s("code",[t._v("@")]),t._v(" 符号。在 SmartSql 底层将会使用正则对此字符串进行替换，能够通过前缀取出需要替换的属性。而根据方法里面的 "),s("code",[t._v("Param")]),t._v(" 特性找到对应的参数，从而拿到对应的值")]),t._v(" "),s("p",[t._v("如在以上例子中，在 SQL 语句中使用了 "),s("code",[t._v("@Id")]),t._v(" 标识，此时将可以通过前缀 "),s("code",[t._v("@")]),t._v(" 判断取出需要替换的属性是 "),s("code",[t._v("Id")]),t._v(" 属性。从对应的方法 "),s("code",[t._v('User GetById([Param("Id")]long id);')]),t._v(" 的 "),s("code",[t._v("Param")]),t._v(" 特性找到对应的参数是 "),s("code",[t._v("long id")]),t._v(" 参数，因此在运行时将可以进行属性替换为参数")]),t._v(" "),s("p",[t._v("在 SmartSql 的属性前缀替换是十分智能的，将会根据所使用的数据库替换为不同的值，其目的是规避数据库的关键词以及合法变量。其次 SmartSql 也支持在业务端自定义属性前缀")]),t._v(" "),s("p",[t._v("默认定义如下")]),t._v(" "),s("ul",[s("li",[t._v("SQL Server: "),s("code",[t._v("@")])]),t._v(" "),s("li",[t._v("My SQL Server: "),s("code",[t._v("@")])]),t._v(" "),s("li",[t._v("POSTGRESQL: "),s("code",[t._v("@")])]),t._v(" "),s("li",[t._v("SQLite: "),s("code",[t._v("@")])]),t._v(" "),s("li",[t._v("MySQL: "),s("code",[t._v("?")])]),t._v(" "),s("li",[t._v("MySQL CONNECTOR: "),s("code",[t._v("?")])]),t._v(" "),s("li",[t._v("ORACLE: "),s("code",[t._v(":")])])]),t._v(" "),s("p",[t._v("以上默认定义在 "),s("a",{attrs:{href:"https://github.com/dotnetcore/SmartSql/blob/e3a18b7c356b7a2033eaf3c9a55f9ca9b92121ec/src/SmartSql/DataSource/DbProviderManager.cs#L13-L66",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方仓库的 src/SmartSql/DataSource/DbProviderManager.cs"),s("OutboundLink")],1),t._v(" 代码文件里")]),t._v(" "),s("p",[t._v("通过默认值定义可以了解到为什么从 SQLite 替换到 MySQL 时，可能存在 SQL 的属性替换失败，在 "),s("code",[t._v("SmartSql.Middlewares.PrepareStatementMiddleware")]),t._v(" 的输出里面没有参数，显示代码是 "),s("code",[t._v("Parameters:[]")]),t._v(" 没有参数")]),t._v(" "),s("p",[t._v("其中一个可能的原因是在 SQLite 中使用的 SQL 语句是 "),s("code",[t._v("Select * From T_User Where Id=@Id")]),t._v(" 属性使用前缀是 "),s("code",[t._v("@")]),t._v(" 符号，而通过默认值定义可以看到在 MySQL 的默认定义是 "),s("code",[t._v("?")]),t._v(" 符号。因此需要将 SQL 语句替换为 "),s("code",[t._v("Select * From T_User Where Id=?Id")]),t._v(" 才能替换参数")]),t._v(" "),s("p",[t._v("在使用方法上，因为如果 SQL 语句需要动态根据所使用的数据库而进行变更，那么在更换数据库时将会存在很大的工作量。因此 SmartSql 库提供了开发者自定义的属性前缀的方法，通过开发者自定义的属性前缀可以做到在更换数据库类型时，不需要更改 SQL 语句")]),t._v(" "),s("p",[t._v("在开发者端自定义属性前缀，可以在 SmartSqlMapConfig.xml 的 Settings 使用 ParameterPrefix 属性进行定义，如以下示例")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("SmartSqlMapConfig")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("xmlns")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("http://SmartSql.net/schemas/SmartSqlMapConfig.xsd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Settings")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("IgnoreParameterCase")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("false"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("ParameterPrefix")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("IsCacheEnabled")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("true"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("EnablePropertyChangedTrack")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("true"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("SmartSqlMapConfig")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("以上代码将在开发者端定义属性前缀是 "),s("code",[t._v("$")]),t._v(" 符号，此时在 SQL 语句中所有使用 "),s("code",[t._v("$")]),t._v(" 开头的属性将会被识别为需要替换的属性，将会在运行时进行参数替换")]),t._v(" "),s("p",[t._v("在 SmartSql 的 SQL 属性替换的原理如下")]),t._v(" "),s("p",[t._v("在应用程序启动时，将创建 DbProviderManager.cs 的各个数据库对应的参数配置，将会初始化各个不同的数据库使用的默认属性前缀。详细代码请看 "),s("a",{attrs:{href:"https://github.com/dotnetcore/SmartSql/blob/e3a18b7c356b7a2033eaf3c9a55f9ca9b92121ec/src/SmartSql/DataSource/DbProviderManager.cs#L13-L66",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方仓库的 src/SmartSql/DataSource/DbProviderManager.cs"),s("OutboundLink")],1),t._v(" 代码")]),t._v(" "),s("p",[t._v("在启动过程的 "),s("code",[t._v("SmartSql.ConfigBuilder.XmlConfigBuilder.BuildDatabase()")]),t._v(" 函数将根据配置文件决定使用哪个数据库，因此将拿到对应的数据库默认属性前缀")]),t._v(" "),s("p",[t._v("在 SmartSql 的设计里面，将在启动过程的 "),s("code",[t._v("SmartSql.ConfigBuilder.SqlMapBuilder.BuildStatements()")]),t._v(" 读取所有的 XML 文件定义的 SQL 语句，在此方法进行构建")]),t._v(" "),s("p",[t._v("在 BuildStatements 方法构建的核心逻辑将会调用 "),s("code",[t._v("SmartSql.Configuration.Tags.TagBuilders.SqlTextBuilder.Build")]),t._v(" 方法，此方法将会进行字符串替换，将 SQL 语句中所有用到自定义属性前缀的字符替换为具体数据库的默认属性前缀的值，代码如下")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[t._v("        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t._v("ITag")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Build")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XmlNode")]),t._v(" xmlNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Statement")]),t._v(" statement"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" innerText "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" xmlNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("InnerText"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" sqlConfig "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" statement"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SqlMap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SmartSqlConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以下是核心代码，将替换对应的 SQL 语句中使用开发者自定义的前缀的字符替换为具体数据库的默认属性前缀的值")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" bodyText "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" innerText"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sqlConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Settings"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ParameterPrefix\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sqlConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Database"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DbProvider"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ParameterPrefix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("SqlText")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bodyText\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sqlConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Database"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DbProvider"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ParameterPrefix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                Statement "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" statement\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("以上代码的 innerText 是开发者编写的 SQL 语句，如 "),s("code",[t._v("Select * From T_User Where Id=$Id")]),t._v(" 代码。而 "),s("code",[t._v("sqlConfig.Settings.ParameterPrefix")]),t._v(" 对应在 SmartSqlMapConfig.xml 的 Settings 的 ParameterPrefix 属性。而 sqlConfig.Database.DbProvider.ParameterPrefix 是对应数据库的默认属性前缀的值")]),t._v(" "),s("p",[t._v("假定如上示例开发者自定义的属性前缀是 "),s("code",[t._v("$")]),t._v(" 字符，而采用数据库是 "),s("code",[t._v("SQLite")]),t._v(" 数据库，通过上文可以了解到 "),s("code",[t._v("SQLite")]),t._v(" 数据库的默认属性前缀的值是 "),s("code",[t._v("@")]),t._v(" 字符，因此以上代码等价于如下代码")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" innerText "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Select * From T_User Where Id=$Id"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" bodyText "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" innerText"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("因此最终的 SQL 语句都会使用对应数据库的默认属性前缀的值作为属性前缀")]),t._v(" "),s("p",[t._v("在运行的过程，在调用对应的访问数据库方法时，将会先找到对应的 SQL 语句，经过 "),s("a",{attrs:{href:"https://github.com/dotnetcore/SmartSql/blob/e3a18b7c356b7a2033eaf3c9a55f9ca9b92121ec/src/SmartSql/Middlewares/PrepareStatementMiddleware.cs#L65-L88",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("SmartSql.Middlewares.PrepareStatementMiddleware.BuildDbParameters")]),s("OutboundLink")],1),t._v(" 方法进行属性替换为业务传入参数")]),t._v(" "),s("p",[t._v("其中这个步骤核心逻辑是将拿到的参数预先构建为 属性名-参数值 的字典，然后进入 "),s("a",{attrs:{href:"https://github.com/dotnetcore/SmartSql/blob/e3a18b7c356b7a2033eaf3c9a55f9ca9b92121ec/src/SmartSql/Utils/SqlParamAnalyzer.cs#L33",target:"_blank",rel:"noopener noreferrer"}},[t._v("SqlParamAnalyzer 的 Replace"),s("OutboundLink")],1),t._v(" 方法进行属性和参数的替换逻辑")]),t._v(" "),s("p",[t._v("在 "),s("a",{attrs:{href:"https://github.com/dotnetcore/SmartSql/blob/e3a18b7c356b7a2033eaf3c9a55f9ca9b92121ec/src/SmartSql/Utils/SqlParamAnalyzer.cs#L33",target:"_blank",rel:"noopener noreferrer"}},[t._v("SqlParamAnalyzer 的 Replace"),s("OutboundLink")],1),t._v(" 方法里面将通过正则替换的方法，找到 SQL 语句里面的各个属性，执行传入的属性和参数的替换方法，替换属性为对应的参数")]),t._v(" "),s("p",[t._v("因此如果想要让 SQL 语句能被正确替换属性，需要在 "),s("a",{attrs:{href:"https://github.com/dotnetcore/SmartSql/blob/e3a18b7c356b7a2033eaf3c9a55f9ca9b92121ec/src/SmartSql/Utils/SqlParamAnalyzer.cs#L33",target:"_blank",rel:"noopener noreferrer"}},[t._v("SqlParamAnalyzer 的 Replace"),s("OutboundLink")],1),t._v(" 方法的第一步正则替换能正确执行。在 "),s("a",{attrs:{href:"https://github.com/dotnetcore/SmartSql/blob/e3a18b7c356b7a2033eaf3c9a55f9ca9b92121ec/src/SmartSql/Utils/SqlParamAnalyzer.cs",target:"_blank",rel:"noopener noreferrer"}},[t._v("SqlParamAnalyzer"),s("OutboundLink")],1),t._v(" 的构造函数将会创建出正则，请看代码")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[t._v("        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("SqlParamAnalyzer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")])]),t._v(" ignoreCase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")])]),t._v(" dbPrefix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" regOptions "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" RegexOptions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Multiline "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" RegexOptions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CultureInvariant "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" RegexOptions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Compiled"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ignoreCase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                regOptions "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" regOptions "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" RegexOptions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("IgnoreCase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n            _sqlParamsTokens "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("Regex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"["')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" dbPrefix "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"]([\\p{L}\\p{N}_.\\[\\]]+)"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" regOptions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("以上代码的 "),s("code",[t._v("dbPrefix")]),t._v(" 将会被传入具体的数据库的默认属性前缀的值，如 "),s("code",[t._v("SQLite")]),t._v(" 数据库的默认属性前缀的值是 "),s("code",[t._v("@")]),t._v(" 字符")]),t._v(" "),s("p",[t._v("根据正则字符串可以找到 SQL 里面所有的属性字符串，将属性替换为具体的参数即可完成实际使用的 SQL 语句。输出的实际使用的 SQL 语句将会放在 RequestContext 的 RealSql 字符串中")]),t._v(" "),s("p",[t._v("在 appsettings.json 中将 LogLevel 的 Default 设置为 Debug 等级，可以在运行时看到从开发者编写的 SQL 语句加上参数的实际 SQL 语句，大概内容如下")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[t._v("dbug"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" SmartSql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Middlewares"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PrepareStatementMiddleware"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      Statement"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token attribute"}},[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("GetEntity")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token named-parameter punctuation"}},[t._v("Sql")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      Select "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" From T_User "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Where")]),t._v(" Id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("@"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Id")]),t._v("\n      Parameters"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      Sql with "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("parameter")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      Select "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" From T_User "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Where")]),t._v(" Id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);